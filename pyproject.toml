[project]
name = "pytoolsmith"
version = "0.1.8"
description = "A lightweight Python library that simplifies the process of exposing functions as tools for Large Language Models"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Zach Cloud", email = "me@zachb.cloud" },
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = []

[dependency-groups]
dev = [
    # Add your dependencies here
    "pydantic==2.10.6",
    "ruff>=0.9.9",
    "pytest==7.4.0",
    "pytest-cov==4.1.0",
    "coverage[toml]==7.3.2",
    "bson==0.5.10",
    "anthropic==0.47.1",
    "openai==1.60.0",
    "python-dotenv==1.0.1",
    "boto3==1.37.8",
]

[project.urls]
"Homepage" = "https://github.com/zachrobo1/pytoolsmith"
"Bug Tracker" = "https://github.com/zachrobo1/pytoolsmith/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel.shared-data]
"CHANGELOG.md" = "CHANGELOG.md"

[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
# Enable Pycodestyle (`E`) and Pyflakes (`F`)
select = ["E", "F", "I", "UP"]
ignore = []



# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.isort]
known-first-party = ["pytoolsmith"]
force-sort-within-sections = true
# Automatically combine import statements from the same module
combine-as-imports = true

# Add coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]